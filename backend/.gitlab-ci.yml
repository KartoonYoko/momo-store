include: 
  - template: Security/SAST.gitlab-ci.yml
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'

stages:
  - build
  - test
  - release
  - deploy

variables:
  SAST_EXCLUDED_ANALYZERS: nodejs-scan, eslint, spotbugs-sast, gosec-sast
  BACKEND_DOCKER_IMAGE_TAG: "1.0.${$CI_COMMIT_SHA}"

build-backend:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd backend
    - >
      docker build
      --tag $CI_REGISTRY_IMAGE/momo-backend:$BACKEND_DOCKER_IMAGE_TAG
      .
    - docker push $CI_REGISTRY_IMAGE/momo-backend:$BACKEND_DOCKER_IMAGE_TAG

upload-backend-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/momo-backend:$BACKEND_DOCKER_IMAGE_TAG
    # если образ прошел проверки в CI (сканирование, тесты и т.д), то тегаем latest
    - docker tag $CI_REGISTRY_IMAGE/momo-backend:$BACKEND_DOCKER_IMAGE_TAG $CI_REGISTRY_IMAGE/momo-backend:latest
    - docker push $CI_REGISTRY_IMAGE/momo-backend:latest

sonarqube-backend-sast:
  stage: test
  needs:
    - job: build-backend
      artifacts: true
      optional: true
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - cd backend
    - >
      sonar-scanner
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACKEND}
      -Dsonar.projectName=${SONAR_PROJECT_KEY_BACKEND}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_PROJECT_BACKEND_TOKEN}

unit-tests-backend:
  stage: test
  image: golang:1.21.1-bookworm
  needs:
    - job: build-backend
      artifacts: true
      optional: true
  script:
    - cd backend
    - go test -v ./...

deploy-backend:
  stage: deploy
  image: docker:20.10.12-dind
  rules:
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"
      when: manual
    # - when: manual
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "${DOCKER_SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "${DOCKER_KNOWN_HOSTS}" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - export BACKEND_IMAGE_TAG="$BACKEND_DOCKER_IMAGE_TAG"
    - docker context create momo-remote --docker host=ssh://${DOCKER_USER}@${DOCKER_REMOTE_HOST}
    - docker --context momo-remote compose up backend -d

# пример деплоя на другое окружение
# deploy-backend-dev:
#   stage: deploy
#   image: docker:20.10.12-dind
#   rules:
#     - if: $CI_COMMIT_BRANCH =~ /^feature/
#     - if: $CI_COMMIT_BRANCH =~ /^develop/
#   before_script:
#     - apk add openssh-client bash
#     - eval $(ssh-agent -s)
#     - echo "${DOCKER_SSH_PRIVATE_KEY_DEV}" | tr -d '\r' | ssh-add -
#     - mkdir -p ~/.ssh
#     - chmod 700 ~/.ssh
#     - echo "${DOCKER_KNOWN_HOSTS_DEV}" >> ~/.ssh/known_hosts
#     - chmod 644 ~/.ssh/known_hosts
#   script:
#     - export BACKEND_IMAGE_TAG="$BACKEND_DOCKER_IMAGE_TAG"
#     - docker context create momo-remote --docker host=ssh://${DOCKER_USER_DEV}@${DOCKER_REMOTE_HOST_DEV}
#     - docker --context momo-remote compose up backend -d
